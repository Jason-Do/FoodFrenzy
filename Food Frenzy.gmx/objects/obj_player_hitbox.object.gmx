<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_hitbox</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Init
grav_def = 0.2;
grav = grav_def;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get player input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_up_hold = keyboard_check(vk_up);
key_down_hold = keyboard_check(vk_down);
key_up = keyboard_check_pressed(vk_up);


if (keyboard_check_pressed(vk_right))
{
    if (obj_player.image_xscale &lt; 0)
    {
        obj_player.image_xscale*= -1;
    }
}
if (keyboard_check_pressed(vk_left))
{
    if (obj_player.image_xscale &gt; 0)
    {
        obj_player.image_xscale*= -1;
    }
}

if (key_up_hold == 1 || key_down_hold)
{
    if (key_up_hold)
    {
        grav = grav_def/2;
    }
    else
    {
        grav = grav_def * 4;
    }
}
else
{
    grav = grav_def;
}


//reaction
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;
if place_meeting(x,y+1,obj_wall)
{
    vsp = key_up * -jumpspeed;
    if (key_up)
    {
        audio_play_sound(snd_shortfart, 10, false);
    }
}


//horiz collision
if (place_meeting(x + hsp, y, obj_wall))
{
    while (!place_meeting( x+ sign(hsp), y, obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
if (global.boss == 1)
{
    if (place_meeting(x + hsp, y, obj_wall_hide))
    {
        while (!place_meeting( x+ sign(hsp), y, obj_wall_hide))
        {
            x += sign(hsp);
        }
        hsp = 0;
    }
}

//vert collision
if (place_meeting(x, y + vsp, obj_wall))
{
    while (!place_meeting(x, y + sign(vsp), obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}


x += hsp;
y += vsp;


//sprites
floor_id = collision_rectangle(x, y + 1, x + sprite_width, y + sprite_height + 1, obj_wall, true, false);


if (global.boss == 1)
{
    if (vsp == 0 &amp;&amp; hsp == 0)
    {
        obj_player.sprite_index = spr_playerf;
    }
    else if (vsp == 0 &amp;&amp; hsp != 0)
    {
        obj_player.sprite_index = spr_player_runf;
    }
    else if (vsp != 0)
    {
        obj_player.sprite_index = spr_player_jumpf;
    }
}
else if (lives &gt;= 3)
{
    if (vsp == 0 &amp;&amp; hsp == 0)
    {
        obj_player.sprite_index = spr_player;
    }
    else if (vsp == 0 &amp;&amp; hsp != 0)
    {
        obj_player.sprite_index = spr_player_run;
    }
    else if (vsp != 0)
    {
        obj_player.sprite_index = spr_player_jump;
    }
}
else if (lives == 2)
{
        if (vsp == 0 &amp;&amp; hsp == 0)
    {
        obj_player.sprite_index = spr_player2;
    }
    else if (vsp == 0 &amp;&amp; hsp != 0)
    {
        obj_player.sprite_index = spr_player_run2;
    }
    else if (vsp != 0)
    {
        obj_player.sprite_index = spr_player_jump2;
    }
}
else if (lives &lt;= 1)
{
    if (vsp == 0 &amp;&amp; hsp == 0)
    {
        obj_player.sprite_index = spr_player1;
    }
    else if (vsp == 0 &amp;&amp; hsp != 0)
    {
        obj_player.sprite_index = spr_player_run1;
    }
    else if (vsp != 0)
    {
        obj_player.sprite_index = spr_player_jump1;
    }
}






//food collision
/*if (place_meeting(x, y, obj_pizza) || place_meeting(x, y, obj_pizza1))
{
    lives -= 1;
    audio_play_sound(snd_OmNomNom, 10, false);
}
if (place_meeting(x, y, obj_cheese_ball) || place_meeting(x, y, obj_cheese_ball_adv ) || place_meeting(x, y, obj_donut))
{
    lives -= 1;
    audio_play_sound(snd_OmNomNom, 10, false);
}*/
if (place_meeting(x, y, obj_pizza_boss) || place_meeting(x, y, obj_nacho_cheese))
{
    audio_play_sound(snd_OmNomNom, 10, false);
    lives = 0;
}

//power collision
if (place_meeting(x, y, obj_apple_power))
{
    lives += 1;
    audio_play_sound(snd_OmNomNom, 10, false);
}

if (place_meeting(x, y, obj_fork_power))
{
    obj_player.forks += 1;
    audio_play_sound(snd_ForkPickUp, 10, false);
}

//goal collision
if (place_meeting(x, y, obj_goal))
{
    //audio_play_sound(snd_win, 10, false);
    
    
    //global.boss = 1;
    with (obj_pizza_boss)
    {
        instance_destroy();
    }
    
    /*obj_player.forks = 999;
    for (i = 0; i &lt; 10; i++)
    {
        audio_play_sound(snd_ForkPickUp, 10, false);
    }
    with (obj_goal)
    {
        instance_destroy();
    }
    show_message("Finally!  It's dinner time!");
    obj_pizza_fight.alarm[4] = 10;*/
    room_goto(2);
}

if (place_meeting(x, y, obj_goal2))
{
    //audio_play_sound(snd_win, 10, false);
    
    
    global.boss = 1;
    with (obj_pizza_boss)
    {
        instance_destroy();
    }
    
    obj_player.forks = 999;
    for (i = 0; i &lt; 10; i++)
    {
        audio_play_sound(snd_ForkPickUp, 10, false);
    }
    with (obj_goal2)
    {
        instance_destroy();
    }
    show_message("Finally!  It's dinner time!");
    obj_pizza_fight.alarm[4] = 10;
    //room_goto(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
